module iic_func_module
2. (
3. input CLK,
4. input RSTn,
5.
6. input [1:0]Start_Sig,
7. input [7:0]Addr_Sig,
8. input [7:0]WrData,
9. output [7:0]RdData,
10. output Done_Sig,
11.
12. output SCL,
13. inout SDA,
14.
15. /***************/
16. output [4:0]SQ_i
17.
18. );
19.
20.
/*************************/
21.
22.
parameter FREQ = 9'd200;
23.
24.
/*************************/
25.
26. reg [4:0]i;
27. reg [4:0]Go;
28. reg [8:0]C1;

   always @ ( posedge CLK or negedge RSTn )
if( !RSTn )
begin
39. i <= 5'd0;
40. Go <= 5'd0;
41. C1 <= 9'd0;
42. rData <= 8'd0;
43. rSCL <= 1'b1;
44. rSDA <= 1'b1;
45. isAck <= 1'b1;
46. isDone <= 1'b0;
47. isOut <= 1'b1;
48.
49.
50.
end
else if( Start_Sig[0] )
case( i )
51.
52. 0: // Start
53. begin
54.
isOut = 1;
55.
56.
rSCL <= 1'b1;
57.
58. if( C1 == 0 ) rSDA <= 1'b1;
59. else if( C1 == 100 ) rSDA <= 1'b0;
60.
61. if( C1 == FREQ -1) begin C1 <= 9'd0; i <= i + 1'b1; end
62. else C1 <= C1 + 1'b1;
63.
end
64.
65. 1: // Write Device Addr
66. begin rData <= {4'b1010, 3'b000, 1'b0}; i <= 5'd7; Go <= i + 1'b1; end
67.
68. 2: // Wirte Word Addr
69. begin rData <= Addr_Sig; i <= 5'd7; Go <= i + 1'b1; end

  3: // Write Data
72. begin rData <= WrData; i <= 5'd7; Go <= i + 1'b1; end
73.
74.
/*************************/
75.
76. 4: // Stop
77. begin
78.
isOut = 1'b1;
79.
80. if( C1 == 0 ) rSCL <= 1'b0;
81. else if( C1 == 50 ) rSCL <= 1'b1;
82.
83. if( C1 == 0 ) rSDA <= 1'b0;
84. else if( C1 == 150 ) rSDA <= 1'b1;
85.
86. if( C1 == 50 + FREQ -1 ) begin C1 <= 9'd0; i <= i + 1'b1; end
87. else C1 <= C1 + 1'b1;
88.
end
89.
90. 5:
91. begin isDone <= 1'b1; i <= i + 1'b1; end
92.
93. 6:
94. begin isDone <= 1'b0; i <= 5'd0; end
95.
96.
/*******************************/ //function
97.
98. 7,8,9,10,11,12,13,14:
99. begin
 isOut = 1'b1;
 rSDA <= rData[14-i];

 if( C1 == 0 ) rSCL <= 1'b0;
 else if( C1 == 100 ) rSCL <= 1'b1;

 if( C1 == FREQ -1 ) begin C1 <= 9'd0; i <= i + 1'b1; end
 else C1 <= C1 + 1'b1;

end

 15: // waiting for acknowledge
 begin
 isOut = 1'b0;
 if( C1 == 150 ) isAck <= SDA;

   if( C1 == 0 ) rSCL <= 1'b0;
 else if( C1 == 100 ) rSCL <= 1'b1;

 if( C1 == FREQ -1 ) begin C1 <= 9'd0; i <= i + 1'b1; end
 else C1 <= C1 + 1'b1;

end

 16:
 if( isAck != 0 ) i <= 5'd0;
 else i <= Go;


/*******************************/ // end function


  endcase // case ( i )

else if( Start_Sig[1] )
  case( i )

 0: // Start
 begin

isOut = 1;


rSCL <= 1'b1;

 if( C1 == 0 ) rSDA <= 1'b1;
 else if( C1 == 100 ) rSDA <= 1'b0;

 if( C1 == FREQ -1 ) begin C1 <= 9'd0; i <= i + 1'b1; end
 else C1 <= C1 + 1'b1;

end

 1: // Write Device Addr
 begin rData <= {4'b1010, 3'b000, 1'b0}; i <= 5'd9; Go <= i + 1'b1; end

 2: // Wirte Word Addr
 begin rData <= Addr_Sig; i <= 5'd9; Go <= i + 1'b1; end

 3: // Start again
 begin

isOut = 1'b1;

 if( C1 == 0 ) rSCL <= 1'b0;
 else if( C1 == 50 ) rSCL <= 1'b1;
 else if( C1 == 250 ) rSCL <= 1'b0;

 if( C1 == 0 ) rSDA <= 1'b0;
 else if( C1 == 50 ) rSDA <= 1'b1;
 else if( C1 == 150 ) rSDA <= 1'b0;

 if( C1 == 300 -1 ) begin C1 <= 9'd0; i <= i + 1'b1; end
 else C1 <= C1 + 1'b1;

end

 4: // Write Device Addr ( Read )
 begin rData <= {4'b1010, 3'b000, 1'b1}; i <= 5'd9; Go <= i + 1'b1; end

 5: // Read Data
 begin rData <= 8'd0; i <= 5'd19; Go <= i + 1'b1; end


6: // Stop
  begin

isOut = 1'b1;


if( C1 == 0 ) rSCL <= 1'b0;

else if( C1 == 50 ) rSCL <= 1'b1;

 if( C1 == 0 ) rSDA <= 1'b0;
 else if( C1 == 150 ) rSDA <= 1'b1;

 if( C1 == 50 + FREQ -1 ) begin C1 <= 9'd0; i <= i + 1'b1; end
 else C1 <= C1 + 1'b1;

end

 7:
 begin isDone <= 1'b1; i <= i + 1'b1; end

 8:
 begin isDone <= 1'b0; i <= 5'd0; end


/*******************************/ //function

 9,10,11,12,13,14,15,16:
 begin

isOut = 1'b1;


rSDA <= rData[16-i];

 if( C1 == 0 ) rSCL <= 1'b0;
 else if( C1 == 100 ) rSCL <= 1'b1;

 if( C1 == FREQ -1 ) begin C1 <= 9'd0; i <= i + 1'b1; end
 else C1 <= C1 + 1'b1;

end

 17: // waiting for acknowledge
 begin

isOut = 1'b0;


if( C1 == 150 ) isAck <= SDA;

 if( C1 == 0 ) rSCL <= 1'b0;
 else if( C1 == 100 ) rSCL <= 1'b1;


if( C1 == FREQ -1 ) begin C1 <= 9'd0; i <= i + 1'b1; end
   else C1 <= C1 + 1'b1;
end

 18:
 if( isAck != 0 ) i <= 5'd0;
 else i <= Go;


/*****************************/

 19,20,21,22,23,24,25,26: // Read
 begin
 isOut = 1'b0;
 if( C1 == 150 ) rData[26-i] <= SDA;

 if( C1 == 0 ) rSCL <= 1'b0;
 else if( C1 == 100 ) rSCL <= 1'b1;

 if( C1 == FREQ -1 ) begin C1 <= 9'd0; i <= i + 1'b1; end
 else C1 <= C1 + 1'b1;

end

 27: // no acknowledge
 begin
 isOut = 1'b1;
 //if( C1 == 100 ) isAck <= SDA;

 if( C1 == 0 ) rSCL <= 1'b0;
 else if( C1 == 100 ) rSCL <= 1'b1;

 if( C1 == FREQ -1 ) begin C1 <= 9'd0; i <= Go; end
 else C1 <= C1 + 1'b1;

end


/*************************************/ // end fucntion


endcase
